## -*- encoding: utf-8 -*-
## This file (chap4.sagetex.sage) was *autogenerated* from chap4.tex with sagetex.sty version 2012/01/16 v2.3.3-69dcb0eb93de.
import sagetex
_st_ = sagetex.SageTeXProcessor('chap4', version='2012/01/16 v2.3.3-69dcb0eb93de', version_check=True)
_st_.blockbegin()
try:
  f=-x^2*sin(x) + 2
  n=5
  xk=[2*i for i in range(n)]
  fxk=range(n)
  yk=[]
  for i in range(n):
    fxk[i]=N(f(x=xk[i]),20)
    # Neu khong chuyen thanh so thuc bang N(.,20) thi fxk[i] la bieu thuc symbolic dai, dua vao tableVD1 se bao loi
    yk.append((xk[i],fxk[i]))
  # Dung lenh sau tao ra list nhanh hon
  # yk2=[(xk[i],fxk[i]) for i in range(n)]
  R = PolynomialRing(QQ, 'x')
  Lagrange_1 = R.lagrange_polynomial(yk)
  plotL1=plot(Lagrange_1, (-1),(9), color='red', legend_label='$P(x)$')
 
  plotfxk=list_plot(yk, size=50, legend_label='($x_k$,$y_k$)')
  tableVD1=r"\begin{tabular}{l|c|l}"
  tableVD1+=r"$k$ & $x_k$ & $y_k$ \\ \hline"
  for i in range(n):
    tableVD1+=latex(i) + r"&" + latex(round(xk[i],2)) + r"&" + latex(fxk[i]) + r"\\"
  tableVD1+=r"\end{tabular}"
except:
 _st_.goboom(86)
_st_.blockend()
try:
 _st_.inline(0, tableVD1)
except:
 _st_.goboom(93)
try:
 _st_.plot(0, format='notprovided', _p_=plotL1+plotfxk)
except:
 _st_.goboom(96)
_st_.blockbegin()
try:
  n=3
  xk2=[0,1,3]
  fxk2=[1,-1,2]
  #yk2=[(xk2[i],fxk2[i]) for i in range(n)]
  yk2=zip(xk2,fxk2) # zip: couple pairs of values of the two arrays
  R = PolynomialRing(QQ, 'x')
  Lagrange_2 = R.lagrange_polynomial(yk2)
  plotL2=plot(Lagrange_2, (-1),(4), color='red', legend_label='$\mathcal{L}_2(x)$')
  # Ref: http://www.sagemath.org/doc/reference/polynomial_rings/sage/rings/polynomial/polynomial_ring.html
  #Lagrange_2=7/6*x^2-19/6*x+1
  #plotL2=plot(Lagrange_2, (-1,4), color='red', legend_label='$\mathcal{L}_2(x)$')
  #plotfxk2=list_plot(yk2, size=50, legend_label='($x_k$,$y_k$)')
  plotfxk2=list_plot(yk2, size=50)
  tableVD2=r"\begin{tabular}{l|c|l}"
  tableVD2+=r"$k$ & $x_k$ & $y_k$ \\ \hline"
  for i in range(n):
    tableVD2+=latex(i) + r"&" + latex(round(xk2[i],2)) + r"&" + latex(fxk2[i]) + r"\\"
  tableVD2+=r"\end{tabular}"
except:
 _st_.goboom(165)
_st_.blockend()
try:
 _st_.inline(1, tableVD2)
except:
 _st_.goboom(170)
try:
 _st_.plot(1, format='notprovided', _p_=plotfxk2)
except:
 _st_.goboom(173)
try:
 _st_.inline(2, tableVD2)
except:
 _st_.goboom(182)
try:
 _st_.plot(2, format='notprovided', _p_=plotfxk2+plotL2)
except:
 _st_.goboom(185)
try:
 _st_.inline(3, tableVD2)
except:
 _st_.goboom(214)
_st_.blockbegin()
try:
 xp=2
except:
 _st_.goboom(218)
_st_.blockend()
try:
 _st_.inline(4, tableVD2)
except:
 _st_.goboom(238)
try:
 _st_.inline(5, latex(xp))
except:
 _st_.goboom(238)
try:
 _st_.inline(6, latex(xk2[0]))
except:
 _st_.goboom(238)
try:
 _st_.inline(7, latex(xk2[1]))
except:
 _st_.goboom(238)
try:
 _st_.inline(8, latex(xk2[2]))
except:
 _st_.goboom(238)
try:
 _st_.inline(9, latex(xk2[0]))
except:
 _st_.goboom(238)
try:
 _st_.inline(10, latex(xp-xk2[0]))
except:
 _st_.goboom(238)
try:
 _st_.inline(11, latex(xk2[0]-xk2[1]))
except:
 _st_.goboom(238)
try:
 _st_.inline(12, latex(xk2[0]-xk2[2]))
except:
 _st_.goboom(238)
try:
 _st_.inline(13, latex((xp-xk2[0])*(xk2[0]-xk2[1])*(xk2[0]-xk2[2])))
except:
 _st_.goboom(238)
try:
 _st_.inline(14, latex(xk2[1]))
except:
 _st_.goboom(238)
try:
 _st_.inline(15, latex(xk2[1]-xk2[0]))
except:
 _st_.goboom(238)
try:
 _st_.inline(16, latex(xp-xk2[1]))
except:
 _st_.goboom(238)
try:
 _st_.inline(17, latex(xk2[1]-xk2[2]))
except:
 _st_.goboom(238)
try:
 _st_.inline(18, latex((xk2[1]-xk2[0])*(xp-xk2[1])*(xk2[1]-xk2[2])))
except:
 _st_.goboom(238)
try:
 _st_.inline(19, latex(xk2[2]))
except:
 _st_.goboom(238)
try:
 _st_.inline(20, latex(xk2[2]-xk2[0]))
except:
 _st_.goboom(238)
try:
 _st_.inline(21, latex(xk2[2]-xk2[1]))
except:
 _st_.goboom(238)
try:
 _st_.inline(22, latex(xp-xk2[2]))
except:
 _st_.goboom(238)
try:
 _st_.inline(23, latex((xk2[2]-xk2[0])*(xk2[2]-xk2[1])*(xp-xk2[2])))
except:
 _st_.goboom(238)
try:
 _st_.inline(24, latex((xp-xk2[0])*(xp-xk2[1])*(xp-xk2[2])))
except:
 _st_.goboom(238)
try:
 _st_.inline(25, latex((xp-xk2[0])*(xp-xk2[1])*(xp-xk2[2])))
except:
 _st_.goboom(243)
try:
 _st_.inline(26, latex(fxk2[0]))
except:
 _st_.goboom(243)
try:
 _st_.inline(27, latex((xp-xk2[0])*(xk2[0]-xk2[1])*(xk2[0]-xk2[2])))
except:
 _st_.goboom(243)
try:
 _st_.inline(28, latex(fxk2[1]))
except:
 _st_.goboom(243)
try:
 _st_.inline(29, latex((xk2[1]-xk2[0])*(xp-xk2[1])*(xk2[1]-xk2[2])))
except:
 _st_.goboom(243)
try:
 _st_.inline(30, latex(fxk2[2]))
except:
 _st_.goboom(243)
try:
 _st_.inline(31, latex((xk2[2]-xk2[0])*(xk2[2]-xk2[1])*(xp-xk2[2])))
except:
 _st_.goboom(243)
try:
 _st_.inline(32, latex((xp-xk2[0])*(xp-xk2[1])*(xp-xk2[2])*(fxk2[0]/((xp-xk2[0])*(xk2[0]-xk2[1])*(xk2[0]-xk2[2])) + fxk2[1]/((xk2[1]-xk2[0])*(xp-xk2[1])*(xk2[1]-xk2[2])) + fxk2[2]/((xk2[2]-xk2[0])*(xk2[2]-xk2[1])*(xp-xk2[2])))))
except:
 _st_.goboom(243)
try:
 _st_.inline(25, latex((xp-xk2[0])*(xp-xk2[1])*(xp-xk2[2])))
except:
 _st_.goboom(243)
try:
 _st_.inline(26, latex(fxk2[0]))
except:
 _st_.goboom(243)
try:
 _st_.inline(27, latex((xp-xk2[0])*(xk2[0]-xk2[1])*(xk2[0]-xk2[2])))
except:
 _st_.goboom(243)
try:
 _st_.inline(28, latex(fxk2[1]))
except:
 _st_.goboom(243)
try:
 _st_.inline(29, latex((xk2[1]-xk2[0])*(xp-xk2[1])*(xk2[1]-xk2[2])))
except:
 _st_.goboom(243)
try:
 _st_.inline(30, latex(fxk2[2]))
except:
 _st_.goboom(243)
try:
 _st_.inline(31, latex((xk2[2]-xk2[0])*(xk2[2]-xk2[1])*(xp-xk2[2])))
except:
 _st_.goboom(243)
try:
 _st_.inline(32, latex((xp-xk2[0])*(xp-xk2[1])*(xp-xk2[2])*(fxk2[0]/((xp-xk2[0])*(xk2[0]-xk2[1])*(xk2[0]-xk2[2])) + fxk2[1]/((xk2[1]-xk2[0])*(xp-xk2[1])*(xk2[1]-xk2[2])) + fxk2[2]/((xk2[2]-xk2[0])*(xk2[2]-xk2[1])*(xp-xk2[2])))))
except:
 _st_.goboom(243)
_st_.blockbegin()
try:
  n=4
  xk3=[0,1,3,4]
  fxk3=[1,1,2,-1]
 # yk3=[(xk3[i],fxk3[i]) for i in range(n)]
  yk3=zip(xk3,fxk3) # zip: couple pairs of values of the two arrays
  R = PolynomialRing(QQ, 'x')
  Lagrange_3 = R.lagrange_polynomial(yk3)
  plotL3=plot(Lagrange_3, (-1),(5), color='red', legend_label='$\mathcal{L}_3(x)$')
  plotfxk3=list_plot(yk3, size=50, legend_label='($x_k$,$y_k$)')
  tableVD3=r"\begin{tabular}{l|c|l}"
  tableVD3+=r"$k$ & $x_k$ & $y_k$ \\ \hline"
  for i in range(n):
    tableVD3+=latex(i) + r"&" + latex(round(xk3[i],2)) + r"&" + latex(fxk3[i]) + r"\\"
  tableVD3+=r"\end{tabular}"
except:
 _st_.goboom(262)
_st_.blockend()
try:
 _st_.inline(33, tableVD3)
except:
 _st_.goboom(267)
try:
 _st_.plot(3, format='notprovided', _p_=plotfxk3+plotL3)
except:
 _st_.goboom(270)
try:
 _st_.inline(34, latex(Lagrange_3))
except:
 _st_.goboom(292)
_st_.blockbegin()
try:
  xp=1.5
  n=6
  xk4=[1,2,3,4,5,6]
  fxk4=[-3,0,15,48,105,192]
  #[(1, -3), (2, 0), (3, 15), (4, 48), (5, 105), (6, 192)]
  yk4=zip(xk4,fxk4) # zip: couple pairs of values of the two arrays
  R = PolynomialRing(RR, "x")
  bangNewton = R.divided_difference(yk4, full_table=True)
  Lagrange_4 = R.lagrange_polynomial(yk4)
  plotL4=plot(Lagrange_4, (-1),(7), color='red', legend_label='$\mathcal{L}_5(x)$')
  plotfxk4=list_plot(yk4, size=50, legend_label='($x_k$,$y_k$)')
  tableVD4=r"\begin{tabular}{l|c|l}"
  tableVD4+=r"$k$ & $x_k$ & $y_k$ \\ \hline"
  for i in range(n):
    tableVD4+=latex(i) + r"&" + latex(round(xk4[i],2)) + r"&" + latex(fxk4[i]) + r"\\"
  tableVD4+=r"\end{tabular}"
except:
 _st_.goboom(354)
_st_.blockend()
_st_.blockbegin()
try:
 # Now change the full table from Sagemath to my form of representing table
  bang2=list(list(i for i in range(j,n)) for j in range(n))
  for j in range(n):
     for i in range(j,n):
         bang2[j][i-j]=bangNewton[i][j]
 # Now create the Latex table
  tableNewton=r'\begin{tabular}{l|c|' # first column: k, second column: x_k
  for i in range(n): tableNewton+='c' # n columns for finit difference order 0 to n
  tableNewton+=r'}'
  tableNewton+=r'$k$ & $x_k$ & $y_k$'
 # for i in range(n-1): tableNewton+=r' & f[$x_0,\cdots,x_'+str(i+1)+r'$]'
  for i in range(1,n): tableNewton+=r' & $f_\Delta^'+str(i)+r'$'
  tableNewton+=r'\\ \hline'
  for i in range(n):
    tableNewton+=latex(i) + r' & ' + latex(round(xk4[i],2))
    for j in range(i+1):
      tableNewton+= r' & ' + latex(round(bangNewton[i][j],2))
    for j in range(i+1,n): tableNewton+= r' & '
    tableNewton+= r'\\'
  tableNewton+=r'\end{tabular}'
except:
 _st_.goboom(377)
_st_.blockend()
try:
 _st_.inline(35, latex(round(xp,2)))
except:
 _st_.goboom(379)
try:
 _st_.inline(36, tableVD4)
except:
 _st_.goboom(382)
try:
 _st_.plot(4, format='notprovided', _p_=plotfxk4+plotL4)
except:
 _st_.goboom(385)
try:
 _st_.inline(37, tableNewton)
except:
 _st_.goboom(394)
_st_.blockbegin()
try:
  mathNewton = r' = '+latex(bangNewton[0][0])
  sohangNewton = [bangNewton[i][i] for i in range(n)]
  for i in range(1,n):
    mathNewton+= r' + '+latex(bangNewton[i][i])
    for j in range(i):
      mathNewton+=r'('+latex(round(xp-xk4[j],2))+r')'
      sohangNewton[i] *= xp-xk4[j]
  ketquaNewton = sum(sohangNewton[i] for i in range(n))
except:
 _st_.goboom(409)
_st_.blockend()
try:
 _st_.inline(38, latex(round(xp,2)))
except:
 _st_.goboom(415)
try:
 _st_.inline(39, latex(n))
except:
 _st_.goboom(415)
try:
 _st_.inline(40, latex(round(xp,2)))
except:
 _st_.goboom(415)
try:
 _st_.inline(41, mathNewton)
except:
 _st_.goboom(415)
try:
 _st_.inline(42, latex(round(ketquaNewton,3)))
except:
 _st_.goboom(415)
try:
 _st_.inline(38, latex(round(xp,2)))
except:
 _st_.goboom(415)
try:
 _st_.inline(39, latex(n))
except:
 _st_.goboom(415)
try:
 _st_.inline(40, latex(round(xp,2)))
except:
 _st_.goboom(415)
try:
 _st_.inline(41, mathNewton)
except:
 _st_.goboom(415)
try:
 _st_.inline(42, latex(round(ketquaNewton,3)))
except:
 _st_.goboom(415)
_st_.blockbegin()
try:
 a0=2
 b0=0.8
 n=10
 xk=range(n)
 yk=[a0+b0*i+random() for i in range(n)]
 zk=zip(xk,yk)
 plotdata=list_plot(zk, size=50, legend_label='($x_k$,$y_k$)')
 xk2=[xk[i]^2 for i in range(n)]
 matA=matrix([[n,sum(xk)],[sum(xk),sum(xk2)]])
 xkyk=[xk[i]*yk[i] for i in range(n)]
 matB=vector([sum(yk),sum(xkyk)])
 a,b=N(matA\matB)
 plotline=plot(a+b*x,0,n, color='red', legend_label='($y=A+Bx$)')
 
 tableVD5=r"\begin{tabular}{l|c|l}"
 tableVD5+=r"$k$ & $x_k$ & $y_k$ \\ \hline"
 for i in range(n):
   tableVD5+=latex(i) + r"&" + latex(xk[i]) + r"&" + latex(round(yk[i],3)) + r"\\"
 tableVD5+=r"\end{tabular}"
except:
 _st_.goboom(518)
_st_.blockend()
try:
 _st_.inline(43, latex(round(a,3)))
except:
 _st_.goboom(520)
try:
 _st_.inline(44, latex(round(b,3)))
except:
 _st_.goboom(520)
try:
 _st_.inline(45, tableVD5)
except:
 _st_.goboom(523)
try:
 _st_.plot(5, format='notprovided', _p_=plotdata+plotline)
except:
 _st_.goboom(526)
_st_.endofdoc()
