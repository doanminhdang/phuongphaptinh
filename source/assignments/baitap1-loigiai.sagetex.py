## -*- encoding: utf-8 -*-
# This file was *autogenerated* from the file baitap1-loigiai.sagetex.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_504 = Integer(504); _sage_const_500 = Integer(500); _sage_const_502 = Integer(502); _sage_const_0p0005 = RealNumber('0.0005'); _sage_const_334 = Integer(334); _sage_const_496 = Integer(496); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15); _sage_const_14 = Integer(14); _sage_const_19 = Integer(19); _sage_const_18 = Integer(18); _sage_const_100 = Integer(100); _sage_const_102 = Integer(102); _sage_const_227 = Integer(227); _sage_const_220 = Integer(220); _sage_const_223 = Integer(223); _sage_const_69 = Integer(69); _sage_const_553 = Integer(553); _sage_const_552 = Integer(552); _sage_const_556 = Integer(556); _sage_const_555 = Integer(555); _sage_const_554 = Integer(554); _sage_const_127 = Integer(127); _sage_const_129 = Integer(129); _sage_const_435 = Integer(435); _sage_const_268 = Integer(268); _sage_const_498 = Integer(498); _sage_const_544 = Integer(544); _sage_const_548 = Integer(548); _sage_const_491 = Integer(491); _sage_const_265 = Integer(265); _sage_const_494 = Integer(494); _sage_const_45 = Integer(45); _sage_const_399 = Integer(399); _sage_const_404 = Integer(404); _sage_const_155 = Integer(155); _sage_const_406 = Integer(406); _sage_const_402 = Integer(402); _sage_const_408 = Integer(408); _sage_const_158 = Integer(158); _sage_const_272 = Integer(272); _sage_const_270 = Integer(270); _sage_const_279 = Integer(279); _sage_const_54 = Integer(54); _sage_const_412 = Integer(412); _sage_const_410 = Integer(410); _sage_const_309 = Integer(309); _sage_const_300 = Integer(300); _sage_const_306 = Integer(306); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_28 = Integer(28); _sage_const_29 = Integer(29); _sage_const_22 = Integer(22); _sage_const_23 = Integer(23); _sage_const_20 = Integer(20); _sage_const_21 = Integer(21); _sage_const_26 = Integer(26); _sage_const_27 = Integer(27); _sage_const_24 = Integer(24); _sage_const_25 = Integer(25); _sage_const_1p2 = RealNumber('1.2'); _sage_const_1p4 = RealNumber('1.4'); _sage_const_1p5 = RealNumber('1.5'); _sage_const_0p4 = RealNumber('0.4'); _sage_const_0p8 = RealNumber('0.8'); _sage_const_210 = Integer(210); _sage_const_213 = Integer(213); _sage_const_216 = Integer(216); _sage_const_31 = Integer(31); _sage_const_30 = Integer(30); _sage_const_33 = Integer(33); _sage_const_32 = Integer(32); _sage_const_35 = Integer(35); _sage_const_163 = Integer(163); _sage_const_161 = Integer(161)## This file (baitap1-loigiai.sagetex.sage) was *autogenerated* from baitap1-loigiai.tex with sagetex.sty version 2012/01/16 v2.3.3-69dcb0eb93de.
import sagetex
_st_ = sagetex.SageTeXProcessor('baitap1-loigiai', version='2012/01/16 v2.3.3-69dcb0eb93de', version_check=True)
_st_.blockbegin()
try:
 # Tạo hàm số
 def chiadoi(f,a=_sage_const_0 ,b=_sage_const_1 ,n=_sage_const_100 ):
  # Tính nghiệm của hàm số f(x) theo phương pháp chia đôi trên khoảng [a,b], tối đa n bước
  # Yêu cầu: f là hàm số một biến f(x), a và b là hai số thực và a<b, n là một số nguyên dương (>0)
  # Nếu không có các tham số a, b, n: lấy mặc định là đoạn [0,1], và n=100
  # Kết quả được hiển thị làm tròn đến 5 chữ số thập phân
  lamtron=_sage_const_5 
  xk=range(n)
  ak=range(n)
  bk=range(n)
  fxk=range(n)
  # p=find_root(f,a,b) # find nearly exact root
  # p_disp=round(p,lamtron)
  ak[_sage_const_0 ]=a; bk[_sage_const_0 ]=b; xk[_sage_const_0 ]=(ak[_sage_const_0 ]+bk[_sage_const_0 ])/_sage_const_2 ; fxk[_sage_const_0 ]=f(x=xk[_sage_const_0 ])
  for i in range(n-_sage_const_1 ):
     if f(x=xk[i])*f(x=ak[i])<= _sage_const_0 :
         ak[i+_sage_const_1 ]=ak[i]
         bk[i+_sage_const_1 ]=xk[i]
     else:
         ak[i+_sage_const_1 ]=xk[i]
         bk[i+_sage_const_1 ]=bk[i]
     xk[i+_sage_const_1 ]=(bk[i+_sage_const_1 ]+ak[i+_sage_const_1 ])/_sage_const_2 
     fxk[i+_sage_const_1 ]=f(x=xk[i+_sage_const_1 ])
  ak_disp=[round(ak[i],lamtron) for i in range(n)] # to display ak with 4 decimal digits
  bk_disp=[round(bk[i],lamtron) for i in range(n)]
  xk_disp=[round(xk[i],lamtron) for i in range(n)]
  fxk_disp=[round(fxk[i],lamtron) for i in range(n)]
  # return fxk[n-1]
  return fxk_disp,ak_disp,bk_disp,xk_disp
 # Áp dụng để giải bài toán
 __tmp__=var("x"); f = symbolic_expression(x**_sage_const_2 +_sage_const_3 *x-_sage_const_8 **(-_sage_const_14 )).function(x)
 a = _sage_const_0 
 b = _sage_const_1 
 saiso = _sage_const_0p0005 
 n = _sage_const_11 
 #reset('nghiem')
 fxk_disp,ak_disp,bk_disp,xk_disp=chiadoi(f,a,b,n)
 p=find_root(f,a,b) # find nearly exact root
 p_disp=round(p,_sage_const_5 )
except:
 _st_.goboom(_sage_const_127 )
_st_.blockend()
try:
 _st_.inline(_sage_const_0 , latex(a))
except:
 _st_.goboom(_sage_const_129 )
try:
 _st_.inline(_sage_const_1 , latex(b))
except:
 _st_.goboom(_sage_const_129 )
_st_.blockbegin()
try:
 table=r"\begin{tabular}{c|cccc}"
 table+=r"$k$ & $a_k$ & $b_k$ & $x_k$ & $f(x_k)$ \\ \hline"
 for i in range(n):
   table+=latex(i) + r"&" + latex(ak_disp[i]) + r"&" + latex(bk_disp[i]) + r"&" + latex(xk_disp[i]) + r"&" + latex(fxk_disp[i]) + r"\\"
 table+=r"\end{tabular}"
except:
 _st_.goboom(_sage_const_155 )
_st_.blockend()
try:
 _st_.inline(_sage_const_2 , table)
except:
 _st_.goboom(_sage_const_158 )
try:
 _st_.inline(_sage_const_3 , latex(xk_disp[n-_sage_const_1 ]))
except:
 _st_.goboom(_sage_const_161 )
try:
 _st_.inline(_sage_const_4 , latex(p))
except:
 _st_.goboom(_sage_const_163 )
_st_.blockbegin()
try:
 __tmp__=var("x"); g1 = symbolic_expression((_sage_const_2 *x-_sage_const_1 )/x**_sage_const_2 ).function(x)
 g1diff=diff(g1,x)
 plotg1=plot(g1,_sage_const_0p8 ,_sage_const_1p2 )
 plotg1diff=plot(g1diff,_sage_const_0p8 ,_sage_const_1p2 )
 
 __tmp__=var("x"); g2 = symbolic_expression(cos(x) + pi + _sage_const_1 ).function(x)
 g2diff=diff(g2,x)
 plotg2=plot(g2,_sage_const_2 *pi/_sage_const_3 ,_sage_const_4 *pi/_sage_const_3 )
 plotg2diff=plot(g2diff,_sage_const_2 *pi/_sage_const_3 ,_sage_const_4 *pi/_sage_const_3 )
 
 __tmp__=var("x"); g3 = symbolic_expression(e**(_sage_const_2 *x) - _sage_const_1 ).function(x)
 g3diff=diff(g3,x)
except:
 _st_.goboom(_sage_const_210 )
_st_.blockend()
try:
 _st_.inline(_sage_const_5 , latex(g1diff(x)))
except:
 _st_.goboom(_sage_const_213 )
try:
 _st_.plot(_sage_const_0 , format='notprovided', _p_=plotg1)
except:
 _st_.goboom(_sage_const_216 )
try:
 _st_.plot(_sage_const_1 , format='notprovided', _p_=plotg1diff)
except:
 _st_.goboom(_sage_const_216 )
try:
 _st_.inline(_sage_const_6 , latex(g2diff(x)))
except:
 _st_.goboom(_sage_const_220 )
try:
 _st_.inline(_sage_const_7 , latex(g2diff(_sage_const_4 *pi/_sage_const_3 )))
except:
 _st_.goboom(_sage_const_220 )
try:
 _st_.plot(_sage_const_2 , format='notprovided', _p_=plotg2)
except:
 _st_.goboom(_sage_const_223 )
try:
 _st_.plot(_sage_const_3 , format='notprovided', _p_=plotg2diff)
except:
 _st_.goboom(_sage_const_223 )
try:
 _st_.inline(_sage_const_8 , latex(g3diff(x)))
except:
 _st_.goboom(_sage_const_227 )
try:
 _st_.inline(_sage_const_9 , latex(g3diff(x=_sage_const_0 )))
except:
 _st_.goboom(_sage_const_227 )
_st_.blockbegin()
try:
 __tmp__=var("x"); g1 = symbolic_expression((x+_sage_const_1 )**(_sage_const_1 /_sage_const_3 )).function(x)
 g1diff=diff(g1,x)
 g1diff2=diff(g1diff,x)
 plotg1=plot(g1,_sage_const_1 ,_sage_const_2 )
 plotg1diff=plot(g1diff,_sage_const_1 ,_sage_const_2 )
 
 __tmp__=var("x"); f2 = symbolic_expression(_sage_const_2 *tanh(x)-x).function(x)
 __tmp__=var("x"); g2 = symbolic_expression(_sage_const_2 *tanh(x)).function(x)
 g2diff=diff(g2,x)
 plotf2=plot(f2,-_sage_const_3 ,_sage_const_3 )
 plotg2=plot(g2,-_sage_const_3 ,_sage_const_3 )
 plotg2diff=plot(g2diff,-_sage_const_3 ,_sage_const_3 )
 
 __tmp__=var("x"); g3 = symbolic_expression(_sage_const_2 *tanh(x)-_sage_const_3 /_sage_const_2 *x).function(x)
 g3diff=diff(g3,x)
 plotg3=plot(g3,-_sage_const_1 ,_sage_const_1 )
 plotg3diff=plot(g3diff,-_sage_const_1 ,_sage_const_1 )
 #
 #g4(x)=ln((2*e^(2*x)-2-x)/x)/2
 #g4diff=diff(g4,x)
 #plotg4=plot(g4,-3,3)
 #plotg4diff=plot(g4diff,-3,3)
except:
 _st_.goboom(_sage_const_265 )
_st_.blockend()
try:
 _st_.inline(_sage_const_10 , latex(g1diff(x)))
except:
 _st_.goboom(_sage_const_268 )
try:
 _st_.inline(_sage_const_11 , latex(g1(x=_sage_const_1 )))
except:
 _st_.goboom(_sage_const_270 )
try:
 _st_.inline(_sage_const_12 , latex(g1(x=_sage_const_2 )))
except:
 _st_.goboom(_sage_const_270 )
try:
 _st_.inline(_sage_const_13 , latex(g1diff2(x)))
except:
 _st_.goboom(_sage_const_272 )
try:
 _st_.inline(_sage_const_14 , latex(g1diff(x=_sage_const_1 )))
except:
 _st_.goboom(_sage_const_272 )
try:
 _st_.plot(_sage_const_4 , format='notprovided', _p_=plotf2)
except:
 _st_.goboom(_sage_const_279 )
try:
 _st_.plot(_sage_const_5 , format='notprovided', _p_=plotg2diff)
except:
 _st_.goboom(_sage_const_279 )
try:
 _st_.inline(_sage_const_15 , latex(g2diff(x=_sage_const_0 )))
except:
 _st_.goboom(_sage_const_300 )
try:
 _st_.inline(_sage_const_16 , latex(g3diff(x)))
except:
 _st_.goboom(_sage_const_306 )
try:
 _st_.plot(_sage_const_6 , format='notprovided', _p_=plotg3)
except:
 _st_.goboom(_sage_const_309 )
try:
 _st_.plot(_sage_const_7 , format='notprovided', _p_=plotg3diff)
except:
 _st_.goboom(_sage_const_309 )
_st_.blockbegin()
try:
 __tmp__=var("x"); f1 = symbolic_expression(x**_sage_const_3  - _sage_const_2 *x - _sage_const_2 ).function(x)
 __tmp__=var("x"); f2 = symbolic_expression(e**x + x - _sage_const_7 ).function(x)
 __tmp__=var("x"); f3 = symbolic_expression(e**x + sin(x) - _sage_const_4 ).function(x)
except:
 _st_.goboom(_sage_const_334 )
_st_.blockend()
_st_.blockbegin()
try:
 # Tạo hàm số
 def daycung(f,a=_sage_const_0 ,b=_sage_const_1 ,n=_sage_const_100 ):
  # Tính nghiệm của hàm số f(x) theo phương pháp dây cung trên khoảng [a,b], tối đa n bước
  # Yêu cầu: f là hàm số một biến f(x), a và b là hai số thực và a<b, n là một số nguyên dương (>0)
  # Nếu không có các tham số a, b, n: lấy mặc định là đoạn [0,1], và n=100
  # Kết quả được hiển thị làm tròn đến 5 chữ số thập phân
  decipoint=_sage_const_5 
  xk=range(n)
  ak=range(n+_sage_const_1 ) # last value unused
  bk=range(n+_sage_const_1 ) # last value unused
  #deltaxk=range(n)
  fxk=range(n)
  fak=range(n)
  fbk=range(n)
  #p_f=find_root(f,0,1.5) # find nearly exact root
  ak[_sage_const_0 ]=a; bk[_sage_const_0 ]=b;
  for i in range(n):
     fak[i]=f(x=ak[i])
     fbk[i]=f(x=bk[i])
     xk[i]=bk[i]-(fbk[i]*(bk[i]-ak[i]))/(fbk[i]-fak[i])
     fxk[i]=f(x=xk[i])
     #deltaxk[i]=abs(xk[i]-p_f)
     if fxk[i]*fak[i]<= _sage_const_0 :
         ak[i+_sage_const_1 ]=ak[i]
         bk[i+_sage_const_1 ]=xk[i]
     else:
         ak[i+_sage_const_1 ]=xk[i]
         bk[i+_sage_const_1 ]=bk[i]
  ak_disp=[round(ak[i],decipoint) for i in range(n)]
  bk_disp=[round(bk[i],decipoint) for i in range(n)]
  xk_disp=[round(xk[i],decipoint) for i in range(n)]
  fxk_disp=[round(fxk[i],decipoint) for i in range(n)]
  #deltaxk_disp=[round(deltaxk[i],decipoint) for i in range(n)]
  #p_f_disp=round(p_f,decipoint)
  # return fxk[n-1]
  return fxk_disp,ak_disp,bk_disp,xk_disp
 
 # Áp dụng để giải các bài toán
 
 fxk_disp1,ak_disp1,bk_disp1,xk_disp1=daycung(f1,_sage_const_1 ,_sage_const_2 ,_sage_const_2 )
 fxk_disp2,ak_disp2,bk_disp2,xk_disp2=daycung(f2,_sage_const_1 ,_sage_const_2 ,_sage_const_2 )
 fxk_disp3,ak_disp3,bk_disp3,xk_disp3=daycung(f3,_sage_const_1 ,_sage_const_2 ,_sage_const_2 )
 
 n=_sage_const_2 
 
 tableDC1=r"\begin{tabular}{c|cc}"
 tableDC1+=r"$k$ & $x_k$ & $f(x_k)$ \\ \hline"
 for i in range(n):
   tableDC1+=latex(i) + r"&" + latex(xk_disp1[i]) + r"&" + latex(fxk_disp1[i]) + r"\\"
 tableDC1+=r"\end{tabular}"
 
 tableDC2=r"\begin{tabular}{c|cc}"
 tableDC2+=r"$k$ & $x_k$ & $f(x_k)$ \\ \hline"
 for i in range(n):
   tableDC2+=latex(i) + r"&" + latex(xk_disp2[i]) + r"&" + latex(fxk_disp2[i]) + r"\\"
 tableDC2+=r"\end{tabular}"
 
 tableDC3=r"\begin{tabular}{c|cc}"
 tableDC3+=r"$k$ & $x_k$ & $f(x_k)$ \\ \hline"
 for i in range(n):
   tableDC3+=latex(i) + r"&" + latex(xk_disp3[i]) + r"&" + latex(fxk_disp3[i]) + r"\\"
 tableDC3+=r"\end{tabular}"
except:
 _st_.goboom(_sage_const_399 )
_st_.blockend()
try:
 _st_.inline(_sage_const_17 , latex(f1(x)))
except:
 _st_.goboom(_sage_const_402 )
try:
 _st_.inline(_sage_const_18 , tableDC1)
except:
 _st_.goboom(_sage_const_404 )
try:
 _st_.inline(_sage_const_19 , latex(f2(x)))
except:
 _st_.goboom(_sage_const_406 )
try:
 _st_.inline(_sage_const_20 , tableDC2)
except:
 _st_.goboom(_sage_const_408 )
try:
 _st_.inline(_sage_const_21 , latex(f3(x)))
except:
 _st_.goboom(_sage_const_410 )
try:
 _st_.inline(_sage_const_22 , tableDC3)
except:
 _st_.goboom(_sage_const_412 )
_st_.blockbegin()
try:
  __tmp__=var("x"); f1 = symbolic_expression(x**_sage_const_3  + x**_sage_const_2  - _sage_const_1 ).function(x)
  __tmp__=var("x"); f2 = symbolic_expression(x**_sage_const_2  + _sage_const_1 /(x+_sage_const_1 ) - _sage_const_3 *x).function(x)
  __tmp__=var("x"); f3 = symbolic_expression(_sage_const_5 *x - _sage_const_10 ).function(x)
except:
 _st_.goboom(_sage_const_435 )
_st_.blockend()
_st_.blockbegin()
try:
 # Tạo hàm số
 def ppnewton_raphson(f,x0=_sage_const_0 ,n=_sage_const_10 ):
  # Tính nghiệm của hàm số f(x) theo phương pháp Newton-Raphson với điểm bắt đầu là x0, tối đa n bước
  # Yêu cầu: f là hàm số một biến f(x), x0 một số thực thuộc tập xác định của f(x), n là một số nguyên dương (>0)
  # Nếu không có các tham số x0, n: lấy mặc định là x0=0, và n=10
  # Kết quả được hiển thị làm tròn đến 5 chữ số thập phân
  decipoint=_sage_const_5 
  f_diff=diff(f,x,_sage_const_1 )
  xk=range(n+_sage_const_1 )
  xk[_sage_const_0 ]=x0
  fxk=range(n)
  f_diff_xk=range(n)
  #deltaxk=range(n)
  #p_f=find_root(f,0,3) # find nearly exact root
  for i in range(n):
     fxk[i]=f(x=xk[i])
     f_diff_xk[i]=f_diff(x=xk[i])
     xk[i+_sage_const_1 ]=(f_diff_xk[i]*xk[i]-fxk[i])/f_diff_xk[i]
     #deltaxk[i]=abs(xk[i]-p_f)
  xk_disp=[round(xk[i],decipoint) for i in range(n)]
  fxk_disp=[round(fxk[i],decipoint) for i in range(n)]
  #deltaxk_disp=[round(deltaxk[i],decipoint) for i in range(n)]
  #p_f_disp=round(p_f,decipoint)
  # return fxk[n-1]
  return fxk_disp,xk_disp
 
 # Áp dụng để giải các bài toán
 fxk_disp1,xk_disp1=ppnewton_raphson(f1,_sage_const_1 ,_sage_const_3 )
 fxk_disp2,xk_disp2=ppnewton_raphson(f2,_sage_const_1 ,_sage_const_3 )
 fxk_disp3,xk_disp3=ppnewton_raphson(f3,_sage_const_1 ,_sage_const_3 )
 
 # Trình bày các bảng kết quả
 
 n=_sage_const_3 
 
 tableN1=r"\begin{tabular}{c|cc}"
 tableN1+=r"$k$ & $x_k$ & $f(x_k)$ \\ \hline"
 for i in range(n):
   tableN1+=latex(i) + r"&" + latex(xk_disp1[i]) + r"&" + latex(fxk_disp1[i]) + r"\\"
 tableN1+=r"\end{tabular}"
 
 tableN2=r"\begin{tabular}{c|cc}"
 tableN2+=r"$k$ & $x_k$ & $f(x_k)$ \\ \hline"
 for i in range(n):
   tableN2+=latex(i) + r"&" + latex(xk_disp2[i]) + r"&" + latex(fxk_disp2[i]) + r"\\"
 tableN2+=r"\end{tabular}"
 
 tableN3=r"\begin{tabular}{c|cc}"
 tableN3+=r"$k$ & $x_k$ & $f(x_k)$ \\ \hline"
 for i in range(n):
   tableN3+=latex(i) + r"&" + latex(xk_disp3[i]) + r"&" + latex(fxk_disp3[i]) + r"\\"
 tableN3+=r"\end{tabular}"
except:
 _st_.goboom(_sage_const_491 )
_st_.blockend()
try:
 _st_.inline(_sage_const_23 , latex(f1(x)))
except:
 _st_.goboom(_sage_const_494 )
try:
 _st_.inline(_sage_const_24 , tableN1)
except:
 _st_.goboom(_sage_const_496 )
try:
 _st_.inline(_sage_const_25 , latex(f2(x)))
except:
 _st_.goboom(_sage_const_498 )
try:
 _st_.inline(_sage_const_26 , tableN2)
except:
 _st_.goboom(_sage_const_500 )
try:
 _st_.inline(_sage_const_27 , latex(f3(x)))
except:
 _st_.goboom(_sage_const_502 )
try:
 _st_.inline(_sage_const_28 , tableN3)
except:
 _st_.goboom(_sage_const_504 )
_st_.blockbegin()
try:
  __tmp__=var("x"); f = symbolic_expression(_sage_const_54 *x**_sage_const_6  + _sage_const_45 *x**_sage_const_5  - _sage_const_102 *x**_sage_const_4  - _sage_const_69 *x**_sage_const_3  + _sage_const_35 *x**_sage_const_2  + _sage_const_16 *x -_sage_const_4 ).function(x)
  #plotf=plot(f,-1.4,1.2)
  nghiem=range(_sage_const_5 )
  nghiem[_sage_const_0 ]=find_root(f,-_sage_const_1p4 ,-_sage_const_1p2 )
  nghiem[_sage_const_1 ]=-_sage_const_2 /_sage_const_3 
  nghiem[_sage_const_2 ]=find_root(f,_sage_const_0 ,_sage_const_0p4 )
  nghiem[_sage_const_3 ]=_sage_const_1 /_sage_const_2 
  nghiem[_sage_const_4 ]=find_root(f,_sage_const_1 ,_sage_const_1p5 )
  # Kiểm tra:
  __tmp__=var("x"); g = symbolic_expression(_sage_const_54 *(x-nghiem[_sage_const_0 ])*(x-nghiem[_sage_const_1 ])**_sage_const_2 *(x-nghiem[_sage_const_2 ])*(x-nghiem[_sage_const_3 ])*(x-nghiem[_sage_const_4 ])).function(x)
  # So sánh lại g(x) với f(x):
  # g.expand()
  # f
  
except:
 _st_.goboom(_sage_const_544 )
_st_.blockend()
try:
 _st_.plot(_sage_const_8 , format='notprovided', _p_=plot(f,-_sage_const_1p4 ,_sage_const_1p2 ))
except:
 _st_.goboom(_sage_const_548 )
try:
 _st_.inline(_sage_const_29 , latex(nghiem[_sage_const_0 ]))
except:
 _st_.goboom(_sage_const_552 )
try:
 _st_.inline(_sage_const_30 , latex(nghiem[_sage_const_1 ]))
except:
 _st_.goboom(_sage_const_553 )
try:
 _st_.inline(_sage_const_31 , latex(nghiem[_sage_const_2 ]))
except:
 _st_.goboom(_sage_const_554 )
try:
 _st_.inline(_sage_const_32 , latex(nghiem[_sage_const_3 ]))
except:
 _st_.goboom(_sage_const_555 )
try:
 _st_.inline(_sage_const_33 , latex(nghiem[_sage_const_4 ]))
except:
 _st_.goboom(_sage_const_556 )
_st_.endofdoc()
