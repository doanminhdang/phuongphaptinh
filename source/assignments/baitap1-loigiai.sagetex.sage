## -*- encoding: utf-8 -*-
## This file (baitap1-loigiai.sagetex.sage) was *autogenerated* from baitap1-loigiai.tex with sagetex.sty version 2012/01/16 v2.3.3-69dcb0eb93de.
import sagetex
_st_ = sagetex.SageTeXProcessor('baitap1-loigiai', version='2012/01/16 v2.3.3-69dcb0eb93de', version_check=True)
_st_.blockbegin()
try:
 # Tạo hàm số
 def chiadoi(f,a=0,b=1,n=100):
  # Tính nghiệm của hàm số f(x) theo phương pháp chia đôi trên khoảng [a,b], tối đa n bước
  # Yêu cầu: f là hàm số một biến f(x), a và b là hai số thực và a<b, n là một số nguyên dương (>0)
  # Nếu không có các tham số a, b, n: lấy mặc định là đoạn [0,1], và n=100
  # Kết quả được hiển thị làm tròn đến 5 chữ số thập phân
  lamtron=5
  xk=range(n)
  ak=range(n)
  bk=range(n)
  fxk=range(n)
  # p=find_root(f,a,b) # find nearly exact root
  # p_disp=round(p,lamtron)
  ak[0]=a; bk[0]=b; xk[0]=(ak[0]+bk[0])/2; fxk[0]=f(x=xk[0])
  for i in range(n-1):
     if f(x=xk[i])*f(x=ak[i])<= 0:
         ak[i+1]=ak[i]
         bk[i+1]=xk[i]
     else:
         ak[i+1]=xk[i]
         bk[i+1]=bk[i]
     xk[i+1]=(bk[i+1]+ak[i+1])/2
     fxk[i+1]=f(x=xk[i+1])
  ak_disp=[round(ak[i],lamtron) for i in range(n)] # to display ak with 4 decimal digits
  bk_disp=[round(bk[i],lamtron) for i in range(n)]
  xk_disp=[round(xk[i],lamtron) for i in range(n)]
  fxk_disp=[round(fxk[i],lamtron) for i in range(n)]
  # return fxk[n-1]
  return fxk_disp,ak_disp,bk_disp,xk_disp
 # Áp dụng để giải bài toán
 f(x) = x^2+3*x-8^(-14)
 a = 0
 b = 1
 saiso = 0.0005
 n = 11
 #reset('nghiem')
 fxk_disp,ak_disp,bk_disp,xk_disp=chiadoi(f,a,b,n)
 p=find_root(f,a,b) # find nearly exact root
 p_disp=round(p,5)
except:
 _st_.goboom(127)
_st_.blockend()
try:
 _st_.inline(0, latex(a))
except:
 _st_.goboom(129)
try:
 _st_.inline(1, latex(b))
except:
 _st_.goboom(129)
_st_.blockbegin()
try:
 table=r"\begin{tabular}{c|cccc}"
 table+=r"$k$ & $a_k$ & $b_k$ & $x_k$ & $f(x_k)$ \\ \hline"
 for i in range(n):
   table+=latex(i) + r"&" + latex(ak_disp[i]) + r"&" + latex(bk_disp[i]) + r"&" + latex(xk_disp[i]) + r"&" + latex(fxk_disp[i]) + r"\\"
 table+=r"\end{tabular}"
except:
 _st_.goboom(155)
_st_.blockend()
try:
 _st_.inline(2, table)
except:
 _st_.goboom(158)
try:
 _st_.inline(3, latex(xk_disp[n-1]))
except:
 _st_.goboom(161)
try:
 _st_.inline(4, latex(p))
except:
 _st_.goboom(163)
_st_.blockbegin()
try:
 g1(x)=(2*x-1)/x^2
 g1diff=diff(g1,x)
 plotg1=plot(g1,0.8,1.2)
 plotg1diff=plot(g1diff,0.8,1.2)
 
 g2(x)=cos(x) + pi + 1
 g2diff=diff(g2,x)
 plotg2=plot(g2,2*pi/3,4*pi/3)
 plotg2diff=plot(g2diff,2*pi/3,4*pi/3)
 
 g3(x)=e^(2*x) - 1
 g3diff=diff(g3,x)
except:
 _st_.goboom(210)
_st_.blockend()
try:
 _st_.inline(5, latex(g1diff(x)))
except:
 _st_.goboom(213)
try:
 _st_.plot(0, format='notprovided', _p_=plotg1)
except:
 _st_.goboom(216)
try:
 _st_.plot(1, format='notprovided', _p_=plotg1diff)
except:
 _st_.goboom(216)
try:
 _st_.inline(6, latex(g2diff(x)))
except:
 _st_.goboom(220)
try:
 _st_.inline(7, latex(g2diff(4*pi/3)))
except:
 _st_.goboom(220)
try:
 _st_.plot(2, format='notprovided', _p_=plotg2)
except:
 _st_.goboom(223)
try:
 _st_.plot(3, format='notprovided', _p_=plotg2diff)
except:
 _st_.goboom(223)
try:
 _st_.inline(8, latex(g3diff(x)))
except:
 _st_.goboom(227)
try:
 _st_.inline(9, latex(g3diff(x=0)))
except:
 _st_.goboom(227)
_st_.blockbegin()
try:
 g1(x)=(x+1)^(1/3)
 g1diff=diff(g1,x)
 g1diff2=diff(g1diff,x)
 plotg1=plot(g1,1,2)
 plotg1diff=plot(g1diff,1,2)
 
 f2(x)=2*tanh(x)-x
 g2(x)=2*tanh(x)
 g2diff=diff(g2,x)
 plotf2=plot(f2,-3,3)
 plotg2=plot(g2,-3,3)
 plotg2diff=plot(g2diff,-3,3)
 
 g3(x)=2*tanh(x)-3/2*x
 g3diff=diff(g3,x)
 plotg3=plot(g3,-1,1)
 plotg3diff=plot(g3diff,-1,1)
 #
 #g4(x)=ln((2*e^(2*x)-2-x)/x)/2
 #g4diff=diff(g4,x)
 #plotg4=plot(g4,-3,3)
 #plotg4diff=plot(g4diff,-3,3)
except:
 _st_.goboom(265)
_st_.blockend()
try:
 _st_.inline(10, latex(g1diff(x)))
except:
 _st_.goboom(268)
try:
 _st_.inline(11, latex(g1(x=1)))
except:
 _st_.goboom(270)
try:
 _st_.inline(12, latex(g1(x=2)))
except:
 _st_.goboom(270)
try:
 _st_.inline(13, latex(g1diff2(x)))
except:
 _st_.goboom(272)
try:
 _st_.inline(14, latex(g1diff(x=1)))
except:
 _st_.goboom(272)
try:
 _st_.plot(4, format='notprovided', _p_=plotf2)
except:
 _st_.goboom(279)
try:
 _st_.plot(5, format='notprovided', _p_=plotg2diff)
except:
 _st_.goboom(279)
try:
 _st_.inline(15, latex(g2diff(x=0)))
except:
 _st_.goboom(300)
try:
 _st_.inline(16, latex(g3diff(x)))
except:
 _st_.goboom(306)
try:
 _st_.plot(6, format='notprovided', _p_=plotg3)
except:
 _st_.goboom(309)
try:
 _st_.plot(7, format='notprovided', _p_=plotg3diff)
except:
 _st_.goboom(309)
_st_.blockbegin()
try:
 f1(x) = x^3 - 2*x - 2
 f2(x) = e^x + x - 7
 f3(x) = e^x + sin(x) - 4
except:
 _st_.goboom(334)
_st_.blockend()
_st_.blockbegin()
try:
 # Tạo hàm số
 def daycung(f,a=0,b=1,n=100):
  # Tính nghiệm của hàm số f(x) theo phương pháp dây cung trên khoảng [a,b], tối đa n bước
  # Yêu cầu: f là hàm số một biến f(x), a và b là hai số thực và a<b, n là một số nguyên dương (>0)
  # Nếu không có các tham số a, b, n: lấy mặc định là đoạn [0,1], và n=100
  # Kết quả được hiển thị làm tròn đến 5 chữ số thập phân
  decipoint=5
  xk=range(n)
  ak=range(n+1) # last value unused
  bk=range(n+1) # last value unused
  #deltaxk=range(n)
  fxk=range(n)
  fak=range(n)
  fbk=range(n)
  #p_f=find_root(f,0,1.5) # find nearly exact root
  ak[0]=a; bk[0]=b;
  for i in range(n):
     fak[i]=f(x=ak[i])
     fbk[i]=f(x=bk[i])
     xk[i]=bk[i]-(fbk[i]*(bk[i]-ak[i]))/(fbk[i]-fak[i])
     fxk[i]=f(x=xk[i])
     #deltaxk[i]=abs(xk[i]-p_f)
     if fxk[i]*fak[i]<= 0:
         ak[i+1]=ak[i]
         bk[i+1]=xk[i]
     else:
         ak[i+1]=xk[i]
         bk[i+1]=bk[i]
  ak_disp=[round(ak[i],decipoint) for i in range(n)]
  bk_disp=[round(bk[i],decipoint) for i in range(n)]
  xk_disp=[round(xk[i],decipoint) for i in range(n)]
  fxk_disp=[round(fxk[i],decipoint) for i in range(n)]
  #deltaxk_disp=[round(deltaxk[i],decipoint) for i in range(n)]
  #p_f_disp=round(p_f,decipoint)
  # return fxk[n-1]
  return fxk_disp,ak_disp,bk_disp,xk_disp
 
 # Áp dụng để giải các bài toán
 
 fxk_disp1,ak_disp1,bk_disp1,xk_disp1=daycung(f1,1,2,2)
 fxk_disp2,ak_disp2,bk_disp2,xk_disp2=daycung(f2,1,2,2)
 fxk_disp3,ak_disp3,bk_disp3,xk_disp3=daycung(f3,1,2,2)
 
 n=2
 
 tableDC1=r"\begin{tabular}{c|cc}"
 tableDC1+=r"$k$ & $x_k$ & $f(x_k)$ \\ \hline"
 for i in range(n):
   tableDC1+=latex(i) + r"&" + latex(xk_disp1[i]) + r"&" + latex(fxk_disp1[i]) + r"\\"
 tableDC1+=r"\end{tabular}"
 
 tableDC2=r"\begin{tabular}{c|cc}"
 tableDC2+=r"$k$ & $x_k$ & $f(x_k)$ \\ \hline"
 for i in range(n):
   tableDC2+=latex(i) + r"&" + latex(xk_disp2[i]) + r"&" + latex(fxk_disp2[i]) + r"\\"
 tableDC2+=r"\end{tabular}"
 
 tableDC3=r"\begin{tabular}{c|cc}"
 tableDC3+=r"$k$ & $x_k$ & $f(x_k)$ \\ \hline"
 for i in range(n):
   tableDC3+=latex(i) + r"&" + latex(xk_disp3[i]) + r"&" + latex(fxk_disp3[i]) + r"\\"
 tableDC3+=r"\end{tabular}"
except:
 _st_.goboom(399)
_st_.blockend()
try:
 _st_.inline(17, latex(f1(x)))
except:
 _st_.goboom(402)
try:
 _st_.inline(18, tableDC1)
except:
 _st_.goboom(404)
try:
 _st_.inline(19, latex(f2(x)))
except:
 _st_.goboom(406)
try:
 _st_.inline(20, tableDC2)
except:
 _st_.goboom(408)
try:
 _st_.inline(21, latex(f3(x)))
except:
 _st_.goboom(410)
try:
 _st_.inline(22, tableDC3)
except:
 _st_.goboom(412)
_st_.blockbegin()
try:
  f1(x)=x^3 + x^2 - 1
  f2(x)=x^2 + 1/(x+1) - 3*x
  f3(x)=5*x - 10
except:
 _st_.goboom(435)
_st_.blockend()
_st_.blockbegin()
try:
 # Tạo hàm số
 def ppnewton_raphson(f,x0=0,n=10):
  # Tính nghiệm của hàm số f(x) theo phương pháp Newton-Raphson với điểm bắt đầu là x0, tối đa n bước
  # Yêu cầu: f là hàm số một biến f(x), x0 một số thực thuộc tập xác định của f(x), n là một số nguyên dương (>0)
  # Nếu không có các tham số x0, n: lấy mặc định là x0=0, và n=10
  # Kết quả được hiển thị làm tròn đến 5 chữ số thập phân
  decipoint=5
  f_diff=diff(f,x,1)
  xk=range(n+1)
  xk[0]=x0
  fxk=range(n)
  f_diff_xk=range(n)
  #deltaxk=range(n)
  #p_f=find_root(f,0,3) # find nearly exact root
  for i in range(n):
     fxk[i]=f(x=xk[i])
     f_diff_xk[i]=f_diff(x=xk[i])
     xk[i+1]=(f_diff_xk[i]*xk[i]-fxk[i])/f_diff_xk[i]
     #deltaxk[i]=abs(xk[i]-p_f)
  xk_disp=[round(xk[i],decipoint) for i in range(n)]
  fxk_disp=[round(fxk[i],decipoint) for i in range(n)]
  #deltaxk_disp=[round(deltaxk[i],decipoint) for i in range(n)]
  #p_f_disp=round(p_f,decipoint)
  # return fxk[n-1]
  return fxk_disp,xk_disp
 
 # Áp dụng để giải các bài toán
 fxk_disp1,xk_disp1=ppnewton_raphson(f1,1,3)
 fxk_disp2,xk_disp2=ppnewton_raphson(f2,1,3)
 fxk_disp3,xk_disp3=ppnewton_raphson(f3,1,3)
 
 # Trình bày các bảng kết quả
 
 n=3
 
 tableN1=r"\begin{tabular}{c|cc}"
 tableN1+=r"$k$ & $x_k$ & $f(x_k)$ \\ \hline"
 for i in range(n):
   tableN1+=latex(i) + r"&" + latex(xk_disp1[i]) + r"&" + latex(fxk_disp1[i]) + r"\\"
 tableN1+=r"\end{tabular}"
 
 tableN2=r"\begin{tabular}{c|cc}"
 tableN2+=r"$k$ & $x_k$ & $f(x_k)$ \\ \hline"
 for i in range(n):
   tableN2+=latex(i) + r"&" + latex(xk_disp2[i]) + r"&" + latex(fxk_disp2[i]) + r"\\"
 tableN2+=r"\end{tabular}"
 
 tableN3=r"\begin{tabular}{c|cc}"
 tableN3+=r"$k$ & $x_k$ & $f(x_k)$ \\ \hline"
 for i in range(n):
   tableN3+=latex(i) + r"&" + latex(xk_disp3[i]) + r"&" + latex(fxk_disp3[i]) + r"\\"
 tableN3+=r"\end{tabular}"
except:
 _st_.goboom(491)
_st_.blockend()
try:
 _st_.inline(23, latex(f1(x)))
except:
 _st_.goboom(494)
try:
 _st_.inline(24, tableN1)
except:
 _st_.goboom(496)
try:
 _st_.inline(25, latex(f2(x)))
except:
 _st_.goboom(498)
try:
 _st_.inline(26, tableN2)
except:
 _st_.goboom(500)
try:
 _st_.inline(27, latex(f3(x)))
except:
 _st_.goboom(502)
try:
 _st_.inline(28, tableN3)
except:
 _st_.goboom(504)
_st_.blockbegin()
try:
  f(x) = 54*x^6 + 45*x^5 - 102*x^4 - 69*x^3 + 35*x^2 + 16*x -4
  #plotf=plot(f,-1.4,1.2)
  nghiem=range(5)
  nghiem[0]=find_root(f,-1.4,-1.2)
  nghiem[1]=-2/3
  nghiem[2]=find_root(f,0,0.4)
  nghiem[3]=1/2
  nghiem[4]=find_root(f,1,1.5)
  # Kiểm tra:
  g(x)=54*(x-nghiem[0])*(x-nghiem[1])^2*(x-nghiem[2])*(x-nghiem[3])*(x-nghiem[4])
  # So sánh lại g(x) với f(x):
  # g.expand()
  # f
  
except:
 _st_.goboom(544)
_st_.blockend()
try:
 _st_.plot(8, format='notprovided', _p_=plot(f,-1.4,1.2))
except:
 _st_.goboom(548)
try:
 _st_.inline(29, latex(nghiem[0]))
except:
 _st_.goboom(552)
try:
 _st_.inline(30, latex(nghiem[1]))
except:
 _st_.goboom(553)
try:
 _st_.inline(31, latex(nghiem[2]))
except:
 _st_.goboom(554)
try:
 _st_.inline(32, latex(nghiem[3]))
except:
 _st_.goboom(555)
try:
 _st_.inline(33, latex(nghiem[4]))
except:
 _st_.goboom(556)
_st_.endofdoc()
